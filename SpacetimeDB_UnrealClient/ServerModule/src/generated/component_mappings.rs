// PLACEHOLDER FILE - This should be generated by SpacetimeDBCodeGenerator
// Run the code generator from Unreal Editor to create actual component mappings

use spacetimedb::ReducerContext;
use crate::actor::ActorId;

/// Initializes default components for an actor based on its class
pub fn initialize_components_for_class(ctx: &ReducerContext, actor_id: ActorId, class_id: u32) {
    log::info!("Using placeholder component mappings (not generated)");
    
    // Get class details from registry
    if let Some(actor_class) = ctx.db.object_class().filter_by_class_id(&class_id).first() {
        // In placeholder, just add a root component for all actors
        if actor_class.is_actor {
            add_component(ctx, actor_id, 3, "RootComponent"); // SceneComponent as root
        }
    }
}

/// Helper function to add a component to an actor
fn add_component(ctx: &ReducerContext, actor_id: ActorId, component_class_id: u32, component_name: &str) {
    // Get the class to verify it exists and is a component
    if let Some(component_class) = ctx.db.object_class().filter_by_class_id(&component_class_id).first() {
        if !component_class.is_component {
            log::warn!("Attempted to add non-component class {} as component", component_class.class_name);
            return;
        }
        
        log::debug!("Adding component {} of type {} to actor {}", 
                   component_name, component_class.class_name, actor_id);
        
        // Create the component
        ctx.db.actor_component().insert(crate::actor::ActorComponent {
            component_id: crate::actor::spawn::generate_actor_id(),
            owner_actor_id: actor_id,
            component_class_id,
            component_name: component_name.to_string(),
            is_active: true,
        });
    } else {
        log::warn!("Attempted to add component with invalid class ID: {}", component_class_id);
    }
}